# -*- coding: utf-8 -*-
"""CL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18IR0WlPwXq8RmDu8fW3dbtG8rWDa9KRx
"""

# #한글 폰트 설치
# !sudo apt-get install -y fonts-nanum
# !sudo fc-cache -fv
# !rm ~/.cache/matplotlib -rf

# !pip install lime

from __future__ import print_function
import lime
import sklearn
import numpy as np
import sklearn
import sklearn.ensemble
import sklearn.metrics
import csv
from sklearn.model_selection import train_test_split

"""# Fetching data, training a classifier"""


#Import data
import pandas as pd

data = pd.read_csv("data_file/Lime/ReviewPN.csv", encoding='utf-8')
X=data.CHECKED
y=data.PN

Xtr, Xts, Ytr, Yts = train_test_split(X,y,test_size=0.2, shuffle=True, random_state=10)


class_names = ['Negative', 'Positive']

from sklearn import feature_extraction

vectorizer = sklearn.feature_extraction.text.TfidfVectorizer(lowercase=False)
train_vectors = vectorizer.fit_transform(Xtr)
test_vectors = vectorizer.transform(Xts)

rf = sklearn.ensemble.RandomForestClassifier(n_estimators=500)
rf.fit(train_vectors, np.array(Ytr))

pred = rf.predict(test_vectors)
#print(sklearn.metrics.accuracy_score(np.array(Yts), pred))
print(sklearn.metrics.f1_score(np.array(Yts), pred, average='binary'))

"""# Explaining predictions using lime"""

#Explanation with LIME
from lime import lime_text
from sklearn.pipeline import make_pipeline
c = make_pipeline(vectorizer, rf)

print(c.predict_proba([Xts.values[0]]))

from lime.lime_text import LimeTextExplainer
explainer = LimeTextExplainer(class_names=class_names)

idxs = Xts.index

rvs = [] 

for idx in range(0,5) : 
	n_idx = idxs[idx]
	exp = explainer.explain_instance(Xts.values[idx], c.predict_proba, num_features=6)
	print('Document id: %d' % idx)
	print('Probability(positive) =', c.predict_proba([Xts.values[idx]])[0,1])
	print('True class: %s' % class_names[Yts.values[idx]])

	llist=exp.as_list()
	sourceNDArray = np.array(llist) 
	targetList = sourceNDArray.tolist() 
	#print(targetList)

	sum_score = []

	lime=0

	for x in range(0,len(targetList)):
	   #print(targetList[x][1])
	   lime += float(targetList[x][1])

	print(X[n_idx],lime)

	rvs.append(X[n_idx])
	sum_score.append(lime)

rv_list = []

for item in zip(rvs,sum_score) : 
   rv_list.append(
      [
         item[0],
         item[1],
      ]
   ) 

rv_infos = pd.DataFrame(rv_list, columns = ['CHECKED','LIMESCORE'])
rv_infos.to_csv('Lime_Senti.csv',index=False, encoding = 'utf-8-sig')

# print('Original prediction:', rf.predict_proba(test_vectors[idx])[0,1])
# tmp = test_vectors[idx].copy()
# tmp[0,vectorizer.vocabulary_['맛있어요']] = 0
# tmp[0,vectorizer.vocabulary_['많이']] = 0
# print('Prediction removing some features:', rf.predict_proba(tmp)[0,1])
# print('Difference:', rf.predict_proba(tmp)[0,1] - rf.predict_proba(test_vectors[idx])[0,1])

# """# Visualizing explanations"""

# # Commented out IPython magic to ensure Python compatibility.
# #Visualization
# import matplotlib.pyplot as plt
# from matplotlib import font_manager, rc

# # %matplotlib inline
# rc('font', family='NanumBarunGothic')
# fig = exp.as_pyplot_figure()

# exp.show_in_notebook(text=False)

# #HTML 파일로 저장
# exp.save_to_file('lime_ex.html')

# exp.show_in_notebook(text=True)
